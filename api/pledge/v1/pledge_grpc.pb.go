// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: api/pledge/v1/pledge.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PledgeClient is the client API for Pledge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PledgeClient interface {
	CreatePledge(ctx context.Context, in *CreatePledgeRequest, opts ...grpc.CallOption) (*CreatePledgeReply, error)
	UpdatePledgeStatus(ctx context.Context, in *UpdatePledgeStatusRequest, opts ...grpc.CallOption) (*UpdatePledgeStatusReply, error)
	UpdatePledge(ctx context.Context, in *UpdatePledgeRequest, opts ...grpc.CallOption) (*UpdatePledgeReply, error)
	DeletePledge(ctx context.Context, in *DeletePledgeRequest, opts ...grpc.CallOption) (*DeletePledgeReply, error)
	GetPledge(ctx context.Context, in *GetPledgeRequest, opts ...grpc.CallOption) (*GetPledgeReply, error)
	ListPledge(ctx context.Context, in *ListPledgeRequest, opts ...grpc.CallOption) (*ListPledgeReply, error)
}

type pledgeClient struct {
	cc grpc.ClientConnInterface
}

func NewPledgeClient(cc grpc.ClientConnInterface) PledgeClient {
	return &pledgeClient{cc}
}

func (c *pledgeClient) CreatePledge(ctx context.Context, in *CreatePledgeRequest, opts ...grpc.CallOption) (*CreatePledgeReply, error) {
	out := new(CreatePledgeReply)
	err := c.cc.Invoke(ctx, "/api.pledge.v1.Pledge/CreatePledge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pledgeClient) UpdatePledgeStatus(ctx context.Context, in *UpdatePledgeStatusRequest, opts ...grpc.CallOption) (*UpdatePledgeStatusReply, error) {
	out := new(UpdatePledgeStatusReply)
	err := c.cc.Invoke(ctx, "/api.pledge.v1.Pledge/UpdatePledgeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pledgeClient) UpdatePledge(ctx context.Context, in *UpdatePledgeRequest, opts ...grpc.CallOption) (*UpdatePledgeReply, error) {
	out := new(UpdatePledgeReply)
	err := c.cc.Invoke(ctx, "/api.pledge.v1.Pledge/UpdatePledge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pledgeClient) DeletePledge(ctx context.Context, in *DeletePledgeRequest, opts ...grpc.CallOption) (*DeletePledgeReply, error) {
	out := new(DeletePledgeReply)
	err := c.cc.Invoke(ctx, "/api.pledge.v1.Pledge/DeletePledge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pledgeClient) GetPledge(ctx context.Context, in *GetPledgeRequest, opts ...grpc.CallOption) (*GetPledgeReply, error) {
	out := new(GetPledgeReply)
	err := c.cc.Invoke(ctx, "/api.pledge.v1.Pledge/GetPledge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pledgeClient) ListPledge(ctx context.Context, in *ListPledgeRequest, opts ...grpc.CallOption) (*ListPledgeReply, error) {
	out := new(ListPledgeReply)
	err := c.cc.Invoke(ctx, "/api.pledge.v1.Pledge/ListPledge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PledgeServer is the server API for Pledge service.
// All implementations must embed UnimplementedPledgeServer
// for forward compatibility
type PledgeServer interface {
	CreatePledge(context.Context, *CreatePledgeRequest) (*CreatePledgeReply, error)
	UpdatePledgeStatus(context.Context, *UpdatePledgeStatusRequest) (*UpdatePledgeStatusReply, error)
	UpdatePledge(context.Context, *UpdatePledgeRequest) (*UpdatePledgeReply, error)
	DeletePledge(context.Context, *DeletePledgeRequest) (*DeletePledgeReply, error)
	GetPledge(context.Context, *GetPledgeRequest) (*GetPledgeReply, error)
	ListPledge(context.Context, *ListPledgeRequest) (*ListPledgeReply, error)
	mustEmbedUnimplementedPledgeServer()
}

// UnimplementedPledgeServer must be embedded to have forward compatible implementations.
type UnimplementedPledgeServer struct {
}

func (UnimplementedPledgeServer) CreatePledge(context.Context, *CreatePledgeRequest) (*CreatePledgeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePledge not implemented")
}
func (UnimplementedPledgeServer) UpdatePledgeStatus(context.Context, *UpdatePledgeStatusRequest) (*UpdatePledgeStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePledgeStatus not implemented")
}
func (UnimplementedPledgeServer) UpdatePledge(context.Context, *UpdatePledgeRequest) (*UpdatePledgeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePledge not implemented")
}
func (UnimplementedPledgeServer) DeletePledge(context.Context, *DeletePledgeRequest) (*DeletePledgeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePledge not implemented")
}
func (UnimplementedPledgeServer) GetPledge(context.Context, *GetPledgeRequest) (*GetPledgeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPledge not implemented")
}
func (UnimplementedPledgeServer) ListPledge(context.Context, *ListPledgeRequest) (*ListPledgeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPledge not implemented")
}
func (UnimplementedPledgeServer) mustEmbedUnimplementedPledgeServer() {}

// UnsafePledgeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PledgeServer will
// result in compilation errors.
type UnsafePledgeServer interface {
	mustEmbedUnimplementedPledgeServer()
}

func RegisterPledgeServer(s grpc.ServiceRegistrar, srv PledgeServer) {
	s.RegisterService(&Pledge_ServiceDesc, srv)
}

func _Pledge_CreatePledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PledgeServer).CreatePledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pledge.v1.Pledge/CreatePledge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PledgeServer).CreatePledge(ctx, req.(*CreatePledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pledge_UpdatePledgeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePledgeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PledgeServer).UpdatePledgeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pledge.v1.Pledge/UpdatePledgeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PledgeServer).UpdatePledgeStatus(ctx, req.(*UpdatePledgeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pledge_UpdatePledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PledgeServer).UpdatePledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pledge.v1.Pledge/UpdatePledge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PledgeServer).UpdatePledge(ctx, req.(*UpdatePledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pledge_DeletePledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PledgeServer).DeletePledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pledge.v1.Pledge/DeletePledge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PledgeServer).DeletePledge(ctx, req.(*DeletePledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pledge_GetPledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PledgeServer).GetPledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pledge.v1.Pledge/GetPledge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PledgeServer).GetPledge(ctx, req.(*GetPledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pledge_ListPledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PledgeServer).ListPledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pledge.v1.Pledge/ListPledge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PledgeServer).ListPledge(ctx, req.(*ListPledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Pledge_ServiceDesc is the grpc.ServiceDesc for Pledge service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pledge_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.pledge.v1.Pledge",
	HandlerType: (*PledgeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePledge",
			Handler:    _Pledge_CreatePledge_Handler,
		},
		{
			MethodName: "UpdatePledgeStatus",
			Handler:    _Pledge_UpdatePledgeStatus_Handler,
		},
		{
			MethodName: "UpdatePledge",
			Handler:    _Pledge_UpdatePledge_Handler,
		},
		{
			MethodName: "DeletePledge",
			Handler:    _Pledge_DeletePledge_Handler,
		},
		{
			MethodName: "GetPledge",
			Handler:    _Pledge_GetPledge_Handler,
		},
		{
			MethodName: "ListPledge",
			Handler:    _Pledge_ListPledge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/pledge/v1/pledge.proto",
}
