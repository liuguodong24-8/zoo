// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.0
// - protoc             v3.21.7
// source: api/pledge/v1/animal.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAnimalComposeAnimal = "/api.pledge.v1.Animal/ComposeAnimal"
const OperationAnimalCreateAnimal = "/api.pledge.v1.Animal/CreateAnimal"
const OperationAnimalFeedingAnimal = "/api.pledge.v1.Animal/FeedingAnimal"
const OperationAnimalGetAnimal = "/api.pledge.v1.Animal/GetAnimal"
const OperationAnimalKillAnimal = "/api.pledge.v1.Animal/KillAnimal"
const OperationAnimalListAnimal = "/api.pledge.v1.Animal/ListAnimal"

type AnimalHTTPServer interface {
	ComposeAnimal(context.Context, *ComposeAnimalRequest) (*ComposeAnimalReply, error)
	CreateAnimal(context.Context, *CreateAnimalRequest) (*CreateAnimalReply, error)
	FeedingAnimal(context.Context, *FeedingAnimalRequest) (*FeedingAnimalReply, error)
	GetAnimal(context.Context, *GetAnimalRequest) (*GetAnimalReply, error)
	KillAnimal(context.Context, *KillAnimalRequest) (*KillAnimalReply, error)
	ListAnimal(context.Context, *ListAnimalRequest) (*ListAnimalReply, error)
}

func RegisterAnimalHTTPServer(s *http.Server, srv AnimalHTTPServer) {
	r := s.Route("/")
	r.POST("/animal", _Animal_CreateAnimal0_HTTP_Handler(srv))
	r.GET("/animal/{token_id}", _Animal_GetAnimal0_HTTP_Handler(srv))
	r.GET("/animals", _Animal_ListAnimal0_HTTP_Handler(srv))
	r.POST("/animal/kill", _Animal_KillAnimal0_HTTP_Handler(srv))
	r.POST("/animal/feeding", _Animal_FeedingAnimal0_HTTP_Handler(srv))
	r.POST("/animal/compose", _Animal_ComposeAnimal0_HTTP_Handler(srv))
}

func _Animal_CreateAnimal0_HTTP_Handler(srv AnimalHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateAnimalRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAnimalCreateAnimal)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAnimal(ctx, req.(*CreateAnimalRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateAnimalReply)
		return ctx.Result(200, reply)
	}
}

func _Animal_GetAnimal0_HTTP_Handler(srv AnimalHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAnimalRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAnimalGetAnimal)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAnimal(ctx, req.(*GetAnimalRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAnimalReply)
		return ctx.Result(200, reply)
	}
}

func _Animal_ListAnimal0_HTTP_Handler(srv AnimalHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAnimalRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAnimalListAnimal)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAnimal(ctx, req.(*ListAnimalRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAnimalReply)
		return ctx.Result(200, reply)
	}
}

func _Animal_KillAnimal0_HTTP_Handler(srv AnimalHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in KillAnimalRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAnimalKillAnimal)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.KillAnimal(ctx, req.(*KillAnimalRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*KillAnimalReply)
		return ctx.Result(200, reply)
	}
}

func _Animal_FeedingAnimal0_HTTP_Handler(srv AnimalHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FeedingAnimalRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAnimalFeedingAnimal)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FeedingAnimal(ctx, req.(*FeedingAnimalRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FeedingAnimalReply)
		return ctx.Result(200, reply)
	}
}

func _Animal_ComposeAnimal0_HTTP_Handler(srv AnimalHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ComposeAnimalRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAnimalComposeAnimal)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ComposeAnimal(ctx, req.(*ComposeAnimalRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ComposeAnimalReply)
		return ctx.Result(200, reply)
	}
}

type AnimalHTTPClient interface {
	ComposeAnimal(ctx context.Context, req *ComposeAnimalRequest, opts ...http.CallOption) (rsp *ComposeAnimalReply, err error)
	CreateAnimal(ctx context.Context, req *CreateAnimalRequest, opts ...http.CallOption) (rsp *CreateAnimalReply, err error)
	FeedingAnimal(ctx context.Context, req *FeedingAnimalRequest, opts ...http.CallOption) (rsp *FeedingAnimalReply, err error)
	GetAnimal(ctx context.Context, req *GetAnimalRequest, opts ...http.CallOption) (rsp *GetAnimalReply, err error)
	KillAnimal(ctx context.Context, req *KillAnimalRequest, opts ...http.CallOption) (rsp *KillAnimalReply, err error)
	ListAnimal(ctx context.Context, req *ListAnimalRequest, opts ...http.CallOption) (rsp *ListAnimalReply, err error)
}

type AnimalHTTPClientImpl struct {
	cc *http.Client
}

func NewAnimalHTTPClient(client *http.Client) AnimalHTTPClient {
	return &AnimalHTTPClientImpl{client}
}

func (c *AnimalHTTPClientImpl) ComposeAnimal(ctx context.Context, in *ComposeAnimalRequest, opts ...http.CallOption) (*ComposeAnimalReply, error) {
	var out ComposeAnimalReply
	pattern := "/animal/compose"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAnimalComposeAnimal))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AnimalHTTPClientImpl) CreateAnimal(ctx context.Context, in *CreateAnimalRequest, opts ...http.CallOption) (*CreateAnimalReply, error) {
	var out CreateAnimalReply
	pattern := "/animal"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAnimalCreateAnimal))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AnimalHTTPClientImpl) FeedingAnimal(ctx context.Context, in *FeedingAnimalRequest, opts ...http.CallOption) (*FeedingAnimalReply, error) {
	var out FeedingAnimalReply
	pattern := "/animal/feeding"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAnimalFeedingAnimal))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AnimalHTTPClientImpl) GetAnimal(ctx context.Context, in *GetAnimalRequest, opts ...http.CallOption) (*GetAnimalReply, error) {
	var out GetAnimalReply
	pattern := "/animal/{token_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAnimalGetAnimal))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AnimalHTTPClientImpl) KillAnimal(ctx context.Context, in *KillAnimalRequest, opts ...http.CallOption) (*KillAnimalReply, error) {
	var out KillAnimalReply
	pattern := "/animal/kill"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAnimalKillAnimal))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AnimalHTTPClientImpl) ListAnimal(ctx context.Context, in *ListAnimalRequest, opts ...http.CallOption) (*ListAnimalReply, error) {
	var out ListAnimalReply
	pattern := "/animals"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAnimalListAnimal))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
