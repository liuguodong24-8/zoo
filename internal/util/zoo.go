// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package util

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// NFTFactoryStorageStakeInfo is an auto generated low-level Go binding around an user-defined struct.
type NFTFactoryStorageStakeInfo struct {
	TokenId     *big.Int
	StakeAmount *big.Int
}

// ZooMetaData contains all meta data concerning the Zoo contract.
var ZooMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zooToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zooNFT\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"AddEgg\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"category\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"volume\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rarity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"MintNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"RequestPledge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Requestredeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"resId\",\"type\":\"uint256\"}],\"name\":\"composeLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"redeemAnimalLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"}],\"name\":\"uplevelLog\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"CAPACITY_MASK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"CATEGORY_MASK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LEVEL_MASK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RARITY_MASK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"SEX_MASK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"VOLUME_MASK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addEgg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"animalInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"category\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"volume\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rarity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"age\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"}],\"name\":\"compose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxNFTCategory\",\"type\":\"uint256\"}],\"name\":\"configNFTParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_zooToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zooNFT\",\"type\":\"address\"}],\"name\":\"configTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRequestCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doneRequestCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"egg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getEgg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserPledge\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"internalType\":\"structNFTFactoryStorage.StakeInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hatchPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAgeRandom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNFTCategory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNFTLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStakeNumberRandom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nowEggCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nowhatchCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentPrice\",\"type\":\"uint256\"}],\"name\":\"pledge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentPrice\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"redeemAnimal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEggCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalhatchCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upMaxlevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"}],\"name\":\"uplevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPledge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zooNFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zooToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "",
}

// ZooABI is the input ABI used to generate the binding from.
// Deprecated: Use ZooMetaData.ABI instead.
var ZooABI = ZooMetaData.ABI

// ZooBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ZooMetaData.Bin instead.
var ZooBin = ZooMetaData.Bin

// DeployZoo deploys a new Ethereum contract, binding an instance of Zoo to it.
func DeployZoo(auth *bind.TransactOpts, backend bind.ContractBackend, admin common.Address, _zooToken common.Address, _zooNFT common.Address) (common.Address, *types.Transaction, *Zoo, error) {
	parsed, err := ZooMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ZooBin), backend, admin, _zooToken, _zooNFT)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Zoo{ZooCaller: ZooCaller{contract: contract}, ZooTransactor: ZooTransactor{contract: contract}, ZooFilterer: ZooFilterer{contract: contract}}, nil
}

// Zoo is an auto generated Go binding around an Ethereum contract.
type Zoo struct {
	ZooCaller     // Read-only binding to the contract
	ZooTransactor // Write-only binding to the contract
	ZooFilterer   // Log filterer for contract events
}

// ZooCaller is an auto generated read-only Go binding around an Ethereum contract.
type ZooCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZooTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ZooTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZooFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ZooFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZooSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ZooSession struct {
	Contract     *Zoo              // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ZooCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ZooCallerSession struct {
	Contract *ZooCaller    // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ZooTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ZooTransactorSession struct {
	Contract     *ZooTransactor    // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ZooRaw is an auto generated low-level Go binding around an Ethereum contract.
type ZooRaw struct {
	Contract *Zoo // Generic contract binding to access the raw methods on
}

// ZooCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ZooCallerRaw struct {
	Contract *ZooCaller // Generic read-only contract binding to access the raw methods on
}

// ZooTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ZooTransactorRaw struct {
	Contract *ZooTransactor // Generic write-only contract binding to access the raw methods on
}

// NewZoo creates a new instance of Zoo, bound to a specific deployed contract.
func NewZoo(address common.Address, backend bind.ContractBackend) (*Zoo, error) {
	contract, err := bindZoo(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Zoo{ZooCaller: ZooCaller{contract: contract}, ZooTransactor: ZooTransactor{contract: contract}, ZooFilterer: ZooFilterer{contract: contract}}, nil
}

// NewZooCaller creates a new read-only instance of Zoo, bound to a specific deployed contract.
func NewZooCaller(address common.Address, caller bind.ContractCaller) (*ZooCaller, error) {
	contract, err := bindZoo(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ZooCaller{contract: contract}, nil
}

// NewZooTransactor creates a new write-only instance of Zoo, bound to a specific deployed contract.
func NewZooTransactor(address common.Address, transactor bind.ContractTransactor) (*ZooTransactor, error) {
	contract, err := bindZoo(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ZooTransactor{contract: contract}, nil
}

// NewZooFilterer creates a new log filterer instance of Zoo, bound to a specific deployed contract.
func NewZooFilterer(address common.Address, filterer bind.ContractFilterer) (*ZooFilterer, error) {
	contract, err := bindZoo(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ZooFilterer{contract: contract}, nil
}

// bindZoo binds a generic wrapper to an already deployed contract.
func bindZoo(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ZooABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Zoo *ZooRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Zoo.Contract.ZooCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Zoo *ZooRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Zoo.Contract.ZooTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Zoo *ZooRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Zoo.Contract.ZooTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Zoo *ZooCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Zoo.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Zoo *ZooTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Zoo.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Zoo *ZooTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Zoo.Contract.contract.Transact(opts, method, params...)
}

// CAPACITYMASK is a free data retrieval call binding the contract method 0x92d9caad.
//
// Solidity: function CAPACITY_MASK(uint256 ) view returns(uint256)
func (_Zoo *ZooCaller) CAPACITYMASK(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Zoo.contract.Call(opts, &out, "CAPACITY_MASK", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CAPACITYMASK is a free data retrieval call binding the contract method 0x92d9caad.
//
// Solidity: function CAPACITY_MASK(uint256 ) view returns(uint256)
func (_Zoo *ZooSession) CAPACITYMASK(arg0 *big.Int) (*big.Int, error) {
	return _Zoo.Contract.CAPACITYMASK(&_Zoo.CallOpts, arg0)
}

// CAPACITYMASK is a free data retrieval call binding the contract method 0x92d9caad.
//
// Solidity: function CAPACITY_MASK(uint256 ) view returns(uint256)
func (_Zoo *ZooCallerSession) CAPACITYMASK(arg0 *big.Int) (*big.Int, error) {
	return _Zoo.Contract.CAPACITYMASK(&_Zoo.CallOpts, arg0)
}

// CATEGORYMASK is a free data retrieval call binding the contract method 0x494c0d24.
//
// Solidity: function CATEGORY_MASK(uint256 ) view returns(uint256)
func (_Zoo *ZooCaller) CATEGORYMASK(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Zoo.contract.Call(opts, &out, "CATEGORY_MASK", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CATEGORYMASK is a free data retrieval call binding the contract method 0x494c0d24.
//
// Solidity: function CATEGORY_MASK(uint256 ) view returns(uint256)
func (_Zoo *ZooSession) CATEGORYMASK(arg0 *big.Int) (*big.Int, error) {
	return _Zoo.Contract.CATEGORYMASK(&_Zoo.CallOpts, arg0)
}

// CATEGORYMASK is a free data retrieval call binding the contract method 0x494c0d24.
//
// Solidity: function CATEGORY_MASK(uint256 ) view returns(uint256)
func (_Zoo *ZooCallerSession) CATEGORYMASK(arg0 *big.Int) (*big.Int, error) {
	return _Zoo.Contract.CATEGORYMASK(&_Zoo.CallOpts, arg0)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Zoo *ZooCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Zoo.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Zoo *ZooSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Zoo.Contract.DEFAULTADMINROLE(&_Zoo.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Zoo *ZooCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Zoo.Contract.DEFAULTADMINROLE(&_Zoo.CallOpts)
}

// LEVELMASK is a free data retrieval call binding the contract method 0x0249aad8.
//
// Solidity: function LEVEL_MASK(uint256 ) view returns(uint256)
func (_Zoo *ZooCaller) LEVELMASK(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Zoo.contract.Call(opts, &out, "LEVEL_MASK", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LEVELMASK is a free data retrieval call binding the contract method 0x0249aad8.
//
// Solidity: function LEVEL_MASK(uint256 ) view returns(uint256)
func (_Zoo *ZooSession) LEVELMASK(arg0 *big.Int) (*big.Int, error) {
	return _Zoo.Contract.LEVELMASK(&_Zoo.CallOpts, arg0)
}

// LEVELMASK is a free data retrieval call binding the contract method 0x0249aad8.
//
// Solidity: function LEVEL_MASK(uint256 ) view returns(uint256)
func (_Zoo *ZooCallerSession) LEVELMASK(arg0 *big.Int) (*big.Int, error) {
	return _Zoo.Contract.LEVELMASK(&_Zoo.CallOpts, arg0)
}

// RARITYMASK is a free data retrieval call binding the contract method 0xb3d371fa.
//
// Solidity: function RARITY_MASK(uint256 ) view returns(uint256)
func (_Zoo *ZooCaller) RARITYMASK(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Zoo.contract.Call(opts, &out, "RARITY_MASK", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RARITYMASK is a free data retrieval call binding the contract method 0xb3d371fa.
//
// Solidity: function RARITY_MASK(uint256 ) view returns(uint256)
func (_Zoo *ZooSession) RARITYMASK(arg0 *big.Int) (*big.Int, error) {
	return _Zoo.Contract.RARITYMASK(&_Zoo.CallOpts, arg0)
}

// RARITYMASK is a free data retrieval call binding the contract method 0xb3d371fa.
//
// Solidity: function RARITY_MASK(uint256 ) view returns(uint256)
func (_Zoo *ZooCallerSession) RARITYMASK(arg0 *big.Int) (*big.Int, error) {
	return _Zoo.Contract.RARITYMASK(&_Zoo.CallOpts, arg0)
}

// SEXMASK is a free data retrieval call binding the contract method 0x4d692266.
//
// Solidity: function SEX_MASK(uint256 ) view returns(uint256)
func (_Zoo *ZooCaller) SEXMASK(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Zoo.contract.Call(opts, &out, "SEX_MASK", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SEXMASK is a free data retrieval call binding the contract method 0x4d692266.
//
// Solidity: function SEX_MASK(uint256 ) view returns(uint256)
func (_Zoo *ZooSession) SEXMASK(arg0 *big.Int) (*big.Int, error) {
	return _Zoo.Contract.SEXMASK(&_Zoo.CallOpts, arg0)
}

// SEXMASK is a free data retrieval call binding the contract method 0x4d692266.
//
// Solidity: function SEX_MASK(uint256 ) view returns(uint256)
func (_Zoo *ZooCallerSession) SEXMASK(arg0 *big.Int) (*big.Int, error) {
	return _Zoo.Contract.SEXMASK(&_Zoo.CallOpts, arg0)
}

// VOLUMEMASK is a free data retrieval call binding the contract method 0xf5426792.
//
// Solidity: function VOLUME_MASK(uint256 ) view returns(uint256)
func (_Zoo *ZooCaller) VOLUMEMASK(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Zoo.contract.Call(opts, &out, "VOLUME_MASK", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VOLUMEMASK is a free data retrieval call binding the contract method 0xf5426792.
//
// Solidity: function VOLUME_MASK(uint256 ) view returns(uint256)
func (_Zoo *ZooSession) VOLUMEMASK(arg0 *big.Int) (*big.Int, error) {
	return _Zoo.Contract.VOLUMEMASK(&_Zoo.CallOpts, arg0)
}

// VOLUMEMASK is a free data retrieval call binding the contract method 0xf5426792.
//
// Solidity: function VOLUME_MASK(uint256 ) view returns(uint256)
func (_Zoo *ZooCallerSession) VOLUMEMASK(arg0 *big.Int) (*big.Int, error) {
	return _Zoo.Contract.VOLUMEMASK(&_Zoo.CallOpts, arg0)
}

// AnimalInfo is a free data retrieval call binding the contract method 0xd2232033.
//
// Solidity: function animalInfo(address , uint256 ) view returns(uint256 level, uint256 category, uint256 capacity, uint256 volume, uint256 rarity, uint256 sex, uint256 age, uint256 startTime, uint256 stakeAmount)
func (_Zoo *ZooCaller) AnimalInfo(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (struct {
	Level       *big.Int
	Category    *big.Int
	Capacity    *big.Int
	Volume      *big.Int
	Rarity      *big.Int
	Sex         *big.Int
	Age         *big.Int
	StartTime   *big.Int
	StakeAmount *big.Int
}, error) {
	var out []interface{}
	err := _Zoo.contract.Call(opts, &out, "animalInfo", arg0, arg1)

	outstruct := new(struct {
		Level       *big.Int
		Category    *big.Int
		Capacity    *big.Int
		Volume      *big.Int
		Rarity      *big.Int
		Sex         *big.Int
		Age         *big.Int
		StartTime   *big.Int
		StakeAmount *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Level = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Category = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Capacity = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Volume = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.Rarity = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.Sex = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.Age = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)
	outstruct.StartTime = *abi.ConvertType(out[7], new(*big.Int)).(**big.Int)
	outstruct.StakeAmount = *abi.ConvertType(out[8], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// AnimalInfo is a free data retrieval call binding the contract method 0xd2232033.
//
// Solidity: function animalInfo(address , uint256 ) view returns(uint256 level, uint256 category, uint256 capacity, uint256 volume, uint256 rarity, uint256 sex, uint256 age, uint256 startTime, uint256 stakeAmount)
func (_Zoo *ZooSession) AnimalInfo(arg0 common.Address, arg1 *big.Int) (struct {
	Level       *big.Int
	Category    *big.Int
	Capacity    *big.Int
	Volume      *big.Int
	Rarity      *big.Int
	Sex         *big.Int
	Age         *big.Int
	StartTime   *big.Int
	StakeAmount *big.Int
}, error) {
	return _Zoo.Contract.AnimalInfo(&_Zoo.CallOpts, arg0, arg1)
}

// AnimalInfo is a free data retrieval call binding the contract method 0xd2232033.
//
// Solidity: function animalInfo(address , uint256 ) view returns(uint256 level, uint256 category, uint256 capacity, uint256 volume, uint256 rarity, uint256 sex, uint256 age, uint256 startTime, uint256 stakeAmount)
func (_Zoo *ZooCallerSession) AnimalInfo(arg0 common.Address, arg1 *big.Int) (struct {
	Level       *big.Int
	Category    *big.Int
	Capacity    *big.Int
	Volume      *big.Int
	Rarity      *big.Int
	Sex         *big.Int
	Age         *big.Int
	StartTime   *big.Int
	StakeAmount *big.Int
}, error) {
	return _Zoo.Contract.AnimalInfo(&_Zoo.CallOpts, arg0, arg1)
}

// CurrentRequestCount is a free data retrieval call binding the contract method 0xe1c71daa.
//
// Solidity: function currentRequestCount() view returns(uint256)
func (_Zoo *ZooCaller) CurrentRequestCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Zoo.contract.Call(opts, &out, "currentRequestCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentRequestCount is a free data retrieval call binding the contract method 0xe1c71daa.
//
// Solidity: function currentRequestCount() view returns(uint256)
func (_Zoo *ZooSession) CurrentRequestCount() (*big.Int, error) {
	return _Zoo.Contract.CurrentRequestCount(&_Zoo.CallOpts)
}

// CurrentRequestCount is a free data retrieval call binding the contract method 0xe1c71daa.
//
// Solidity: function currentRequestCount() view returns(uint256)
func (_Zoo *ZooCallerSession) CurrentRequestCount() (*big.Int, error) {
	return _Zoo.Contract.CurrentRequestCount(&_Zoo.CallOpts)
}

// DoneRequestCount is a free data retrieval call binding the contract method 0x0b4c9f5d.
//
// Solidity: function doneRequestCount() view returns(uint256)
func (_Zoo *ZooCaller) DoneRequestCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Zoo.contract.Call(opts, &out, "doneRequestCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DoneRequestCount is a free data retrieval call binding the contract method 0x0b4c9f5d.
//
// Solidity: function doneRequestCount() view returns(uint256)
func (_Zoo *ZooSession) DoneRequestCount() (*big.Int, error) {
	return _Zoo.Contract.DoneRequestCount(&_Zoo.CallOpts)
}

// DoneRequestCount is a free data retrieval call binding the contract method 0x0b4c9f5d.
//
// Solidity: function doneRequestCount() view returns(uint256)
func (_Zoo *ZooCallerSession) DoneRequestCount() (*big.Int, error) {
	return _Zoo.Contract.DoneRequestCount(&_Zoo.CallOpts)
}

// Egg is a free data retrieval call binding the contract method 0x052c0d2e.
//
// Solidity: function egg(address ) view returns(uint256)
func (_Zoo *ZooCaller) Egg(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Zoo.contract.Call(opts, &out, "egg", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Egg is a free data retrieval call binding the contract method 0x052c0d2e.
//
// Solidity: function egg(address ) view returns(uint256)
func (_Zoo *ZooSession) Egg(arg0 common.Address) (*big.Int, error) {
	return _Zoo.Contract.Egg(&_Zoo.CallOpts, arg0)
}

// Egg is a free data retrieval call binding the contract method 0x052c0d2e.
//
// Solidity: function egg(address ) view returns(uint256)
func (_Zoo *ZooCallerSession) Egg(arg0 common.Address) (*big.Int, error) {
	return _Zoo.Contract.Egg(&_Zoo.CallOpts, arg0)
}

// GetEgg is a free data retrieval call binding the contract method 0xe75b4eb6.
//
// Solidity: function getEgg(address addr) view returns(uint256)
func (_Zoo *ZooCaller) GetEgg(opts *bind.CallOpts, addr common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Zoo.contract.Call(opts, &out, "getEgg", addr)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetEgg is a free data retrieval call binding the contract method 0xe75b4eb6.
//
// Solidity: function getEgg(address addr) view returns(uint256)
func (_Zoo *ZooSession) GetEgg(addr common.Address) (*big.Int, error) {
	return _Zoo.Contract.GetEgg(&_Zoo.CallOpts, addr)
}

// GetEgg is a free data retrieval call binding the contract method 0xe75b4eb6.
//
// Solidity: function getEgg(address addr) view returns(uint256)
func (_Zoo *ZooCallerSession) GetEgg(addr common.Address) (*big.Int, error) {
	return _Zoo.Contract.GetEgg(&_Zoo.CallOpts, addr)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Zoo *ZooCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Zoo.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Zoo *ZooSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Zoo.Contract.GetRoleAdmin(&_Zoo.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Zoo *ZooCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Zoo.Contract.GetRoleAdmin(&_Zoo.CallOpts, role)
}

// GetUserPledge is a free data retrieval call binding the contract method 0xf1285716.
//
// Solidity: function getUserPledge(address addr) view returns((uint256,uint256))
func (_Zoo *ZooCaller) GetUserPledge(opts *bind.CallOpts, addr common.Address) (NFTFactoryStorageStakeInfo, error) {
	var out []interface{}
	err := _Zoo.contract.Call(opts, &out, "getUserPledge", addr)

	if err != nil {
		return *new(NFTFactoryStorageStakeInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(NFTFactoryStorageStakeInfo)).(*NFTFactoryStorageStakeInfo)

	return out0, err

}

// GetUserPledge is a free data retrieval call binding the contract method 0xf1285716.
//
// Solidity: function getUserPledge(address addr) view returns((uint256,uint256))
func (_Zoo *ZooSession) GetUserPledge(addr common.Address) (NFTFactoryStorageStakeInfo, error) {
	return _Zoo.Contract.GetUserPledge(&_Zoo.CallOpts, addr)
}

// GetUserPledge is a free data retrieval call binding the contract method 0xf1285716.
//
// Solidity: function getUserPledge(address addr) view returns((uint256,uint256))
func (_Zoo *ZooCallerSession) GetUserPledge(addr common.Address) (NFTFactoryStorageStakeInfo, error) {
	return _Zoo.Contract.GetUserPledge(&_Zoo.CallOpts, addr)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Zoo *ZooCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _Zoo.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Zoo *ZooSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Zoo.Contract.HasRole(&_Zoo.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Zoo *ZooCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Zoo.Contract.HasRole(&_Zoo.CallOpts, role, account)
}

// HatchPrice is a free data retrieval call binding the contract method 0x18ecf365.
//
// Solidity: function hatchPrice() view returns(uint256)
func (_Zoo *ZooCaller) HatchPrice(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Zoo.contract.Call(opts, &out, "hatchPrice")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// HatchPrice is a free data retrieval call binding the contract method 0x18ecf365.
//
// Solidity: function hatchPrice() view returns(uint256)
func (_Zoo *ZooSession) HatchPrice() (*big.Int, error) {
	return _Zoo.Contract.HatchPrice(&_Zoo.CallOpts)
}

// HatchPrice is a free data retrieval call binding the contract method 0x18ecf365.
//
// Solidity: function hatchPrice() view returns(uint256)
func (_Zoo *ZooCallerSession) HatchPrice() (*big.Int, error) {
	return _Zoo.Contract.HatchPrice(&_Zoo.CallOpts)
}

// MaxAgeRandom is a free data retrieval call binding the contract method 0xcb346216.
//
// Solidity: function maxAgeRandom() view returns(uint256)
func (_Zoo *ZooCaller) MaxAgeRandom(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Zoo.contract.Call(opts, &out, "maxAgeRandom")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxAgeRandom is a free data retrieval call binding the contract method 0xcb346216.
//
// Solidity: function maxAgeRandom() view returns(uint256)
func (_Zoo *ZooSession) MaxAgeRandom() (*big.Int, error) {
	return _Zoo.Contract.MaxAgeRandom(&_Zoo.CallOpts)
}

// MaxAgeRandom is a free data retrieval call binding the contract method 0xcb346216.
//
// Solidity: function maxAgeRandom() view returns(uint256)
func (_Zoo *ZooCallerSession) MaxAgeRandom() (*big.Int, error) {
	return _Zoo.Contract.MaxAgeRandom(&_Zoo.CallOpts)
}

// MaxNFTCategory is a free data retrieval call binding the contract method 0x9b50c816.
//
// Solidity: function maxNFTCategory() view returns(uint256)
func (_Zoo *ZooCaller) MaxNFTCategory(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Zoo.contract.Call(opts, &out, "maxNFTCategory")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxNFTCategory is a free data retrieval call binding the contract method 0x9b50c816.
//
// Solidity: function maxNFTCategory() view returns(uint256)
func (_Zoo *ZooSession) MaxNFTCategory() (*big.Int, error) {
	return _Zoo.Contract.MaxNFTCategory(&_Zoo.CallOpts)
}

// MaxNFTCategory is a free data retrieval call binding the contract method 0x9b50c816.
//
// Solidity: function maxNFTCategory() view returns(uint256)
func (_Zoo *ZooCallerSession) MaxNFTCategory() (*big.Int, error) {
	return _Zoo.Contract.MaxNFTCategory(&_Zoo.CallOpts)
}

// MaxNFTLevel is a free data retrieval call binding the contract method 0xde8e3629.
//
// Solidity: function maxNFTLevel() view returns(uint256)
func (_Zoo *ZooCaller) MaxNFTLevel(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Zoo.contract.Call(opts, &out, "maxNFTLevel")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxNFTLevel is a free data retrieval call binding the contract method 0xde8e3629.
//
// Solidity: function maxNFTLevel() view returns(uint256)
func (_Zoo *ZooSession) MaxNFTLevel() (*big.Int, error) {
	return _Zoo.Contract.MaxNFTLevel(&_Zoo.CallOpts)
}

// MaxNFTLevel is a free data retrieval call binding the contract method 0xde8e3629.
//
// Solidity: function maxNFTLevel() view returns(uint256)
func (_Zoo *ZooCallerSession) MaxNFTLevel() (*big.Int, error) {
	return _Zoo.Contract.MaxNFTLevel(&_Zoo.CallOpts)
}

// MaxStakeNumberRandom is a free data retrieval call binding the contract method 0xe713cbdc.
//
// Solidity: function maxStakeNumberRandom() view returns(uint256)
func (_Zoo *ZooCaller) MaxStakeNumberRandom(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Zoo.contract.Call(opts, &out, "maxStakeNumberRandom")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxStakeNumberRandom is a free data retrieval call binding the contract method 0xe713cbdc.
//
// Solidity: function maxStakeNumberRandom() view returns(uint256)
func (_Zoo *ZooSession) MaxStakeNumberRandom() (*big.Int, error) {
	return _Zoo.Contract.MaxStakeNumberRandom(&_Zoo.CallOpts)
}

// MaxStakeNumberRandom is a free data retrieval call binding the contract method 0xe713cbdc.
//
// Solidity: function maxStakeNumberRandom() view returns(uint256)
func (_Zoo *ZooCallerSession) MaxStakeNumberRandom() (*big.Int, error) {
	return _Zoo.Contract.MaxStakeNumberRandom(&_Zoo.CallOpts)
}

// NowEggCount is a free data retrieval call binding the contract method 0xaf4d5255.
//
// Solidity: function nowEggCount() view returns(uint256)
func (_Zoo *ZooCaller) NowEggCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Zoo.contract.Call(opts, &out, "nowEggCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NowEggCount is a free data retrieval call binding the contract method 0xaf4d5255.
//
// Solidity: function nowEggCount() view returns(uint256)
func (_Zoo *ZooSession) NowEggCount() (*big.Int, error) {
	return _Zoo.Contract.NowEggCount(&_Zoo.CallOpts)
}

// NowEggCount is a free data retrieval call binding the contract method 0xaf4d5255.
//
// Solidity: function nowEggCount() view returns(uint256)
func (_Zoo *ZooCallerSession) NowEggCount() (*big.Int, error) {
	return _Zoo.Contract.NowEggCount(&_Zoo.CallOpts)
}

// NowhatchCount is a free data retrieval call binding the contract method 0x5b294cfd.
//
// Solidity: function nowhatchCount() view returns(uint256)
func (_Zoo *ZooCaller) NowhatchCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Zoo.contract.Call(opts, &out, "nowhatchCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NowhatchCount is a free data retrieval call binding the contract method 0x5b294cfd.
//
// Solidity: function nowhatchCount() view returns(uint256)
func (_Zoo *ZooSession) NowhatchCount() (*big.Int, error) {
	return _Zoo.Contract.NowhatchCount(&_Zoo.CallOpts)
}

// NowhatchCount is a free data retrieval call binding the contract method 0x5b294cfd.
//
// Solidity: function nowhatchCount() view returns(uint256)
func (_Zoo *ZooCallerSession) NowhatchCount() (*big.Int, error) {
	return _Zoo.Contract.NowhatchCount(&_Zoo.CallOpts)
}

// StakedAmount is a free data retrieval call binding the contract method 0x5a459ed4.
//
// Solidity: function stakedAmount(uint256 ) view returns(uint256)
func (_Zoo *ZooCaller) StakedAmount(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Zoo.contract.Call(opts, &out, "stakedAmount", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StakedAmount is a free data retrieval call binding the contract method 0x5a459ed4.
//
// Solidity: function stakedAmount(uint256 ) view returns(uint256)
func (_Zoo *ZooSession) StakedAmount(arg0 *big.Int) (*big.Int, error) {
	return _Zoo.Contract.StakedAmount(&_Zoo.CallOpts, arg0)
}

// StakedAmount is a free data retrieval call binding the contract method 0x5a459ed4.
//
// Solidity: function stakedAmount(uint256 ) view returns(uint256)
func (_Zoo *ZooCallerSession) StakedAmount(arg0 *big.Int) (*big.Int, error) {
	return _Zoo.Contract.StakedAmount(&_Zoo.CallOpts, arg0)
}

// StakingFee is a free data retrieval call binding the contract method 0xeff98843.
//
// Solidity: function stakingFee() view returns(uint256)
func (_Zoo *ZooCaller) StakingFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Zoo.contract.Call(opts, &out, "stakingFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StakingFee is a free data retrieval call binding the contract method 0xeff98843.
//
// Solidity: function stakingFee() view returns(uint256)
func (_Zoo *ZooSession) StakingFee() (*big.Int, error) {
	return _Zoo.Contract.StakingFee(&_Zoo.CallOpts)
}

// StakingFee is a free data retrieval call binding the contract method 0xeff98843.
//
// Solidity: function stakingFee() view returns(uint256)
func (_Zoo *ZooCallerSession) StakingFee() (*big.Int, error) {
	return _Zoo.Contract.StakingFee(&_Zoo.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Zoo *ZooCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Zoo.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Zoo *ZooSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Zoo.Contract.SupportsInterface(&_Zoo.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Zoo *ZooCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Zoo.Contract.SupportsInterface(&_Zoo.CallOpts, interfaceId)
}

// Test is a free data retrieval call binding the contract method 0xf8a8fd6d.
//
// Solidity: function test() view returns(uint256)
func (_Zoo *ZooCaller) Test(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Zoo.contract.Call(opts, &out, "test")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Test is a free data retrieval call binding the contract method 0xf8a8fd6d.
//
// Solidity: function test() view returns(uint256)
func (_Zoo *ZooSession) Test() (*big.Int, error) {
	return _Zoo.Contract.Test(&_Zoo.CallOpts)
}

// Test is a free data retrieval call binding the contract method 0xf8a8fd6d.
//
// Solidity: function test() view returns(uint256)
func (_Zoo *ZooCallerSession) Test() (*big.Int, error) {
	return _Zoo.Contract.Test(&_Zoo.CallOpts)
}

// TotalEggCount is a free data retrieval call binding the contract method 0x1f37bd87.
//
// Solidity: function totalEggCount() view returns(uint256)
func (_Zoo *ZooCaller) TotalEggCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Zoo.contract.Call(opts, &out, "totalEggCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalEggCount is a free data retrieval call binding the contract method 0x1f37bd87.
//
// Solidity: function totalEggCount() view returns(uint256)
func (_Zoo *ZooSession) TotalEggCount() (*big.Int, error) {
	return _Zoo.Contract.TotalEggCount(&_Zoo.CallOpts)
}

// TotalEggCount is a free data retrieval call binding the contract method 0x1f37bd87.
//
// Solidity: function totalEggCount() view returns(uint256)
func (_Zoo *ZooCallerSession) TotalEggCount() (*big.Int, error) {
	return _Zoo.Contract.TotalEggCount(&_Zoo.CallOpts)
}

// TotalhatchCount is a free data retrieval call binding the contract method 0x3efda60c.
//
// Solidity: function totalhatchCount() view returns(uint256)
func (_Zoo *ZooCaller) TotalhatchCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Zoo.contract.Call(opts, &out, "totalhatchCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalhatchCount is a free data retrieval call binding the contract method 0x3efda60c.
//
// Solidity: function totalhatchCount() view returns(uint256)
func (_Zoo *ZooSession) TotalhatchCount() (*big.Int, error) {
	return _Zoo.Contract.TotalhatchCount(&_Zoo.CallOpts)
}

// TotalhatchCount is a free data retrieval call binding the contract method 0x3efda60c.
//
// Solidity: function totalhatchCount() view returns(uint256)
func (_Zoo *ZooCallerSession) TotalhatchCount() (*big.Int, error) {
	return _Zoo.Contract.TotalhatchCount(&_Zoo.CallOpts)
}

// UpMaxlevel is a free data retrieval call binding the contract method 0x7f2ca80a.
//
// Solidity: function upMaxlevel() view returns(uint256)
func (_Zoo *ZooCaller) UpMaxlevel(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Zoo.contract.Call(opts, &out, "upMaxlevel")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UpMaxlevel is a free data retrieval call binding the contract method 0x7f2ca80a.
//
// Solidity: function upMaxlevel() view returns(uint256)
func (_Zoo *ZooSession) UpMaxlevel() (*big.Int, error) {
	return _Zoo.Contract.UpMaxlevel(&_Zoo.CallOpts)
}

// UpMaxlevel is a free data retrieval call binding the contract method 0x7f2ca80a.
//
// Solidity: function upMaxlevel() view returns(uint256)
func (_Zoo *ZooCallerSession) UpMaxlevel() (*big.Int, error) {
	return _Zoo.Contract.UpMaxlevel(&_Zoo.CallOpts)
}

// UserPledge is a free data retrieval call binding the contract method 0xb8ecbe31.
//
// Solidity: function userPledge(address ) view returns(uint256 tokenId, uint256 stakeAmount)
func (_Zoo *ZooCaller) UserPledge(opts *bind.CallOpts, arg0 common.Address) (struct {
	TokenId     *big.Int
	StakeAmount *big.Int
}, error) {
	var out []interface{}
	err := _Zoo.contract.Call(opts, &out, "userPledge", arg0)

	outstruct := new(struct {
		TokenId     *big.Int
		StakeAmount *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.TokenId = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.StakeAmount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// UserPledge is a free data retrieval call binding the contract method 0xb8ecbe31.
//
// Solidity: function userPledge(address ) view returns(uint256 tokenId, uint256 stakeAmount)
func (_Zoo *ZooSession) UserPledge(arg0 common.Address) (struct {
	TokenId     *big.Int
	StakeAmount *big.Int
}, error) {
	return _Zoo.Contract.UserPledge(&_Zoo.CallOpts, arg0)
}

// UserPledge is a free data retrieval call binding the contract method 0xb8ecbe31.
//
// Solidity: function userPledge(address ) view returns(uint256 tokenId, uint256 stakeAmount)
func (_Zoo *ZooCallerSession) UserPledge(arg0 common.Address) (struct {
	TokenId     *big.Int
	StakeAmount *big.Int
}, error) {
	return _Zoo.Contract.UserPledge(&_Zoo.CallOpts, arg0)
}

// ZooNFT is a free data retrieval call binding the contract method 0x07d7ca2b.
//
// Solidity: function zooNFT() view returns(address)
func (_Zoo *ZooCaller) ZooNFT(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Zoo.contract.Call(opts, &out, "zooNFT")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ZooNFT is a free data retrieval call binding the contract method 0x07d7ca2b.
//
// Solidity: function zooNFT() view returns(address)
func (_Zoo *ZooSession) ZooNFT() (common.Address, error) {
	return _Zoo.Contract.ZooNFT(&_Zoo.CallOpts)
}

// ZooNFT is a free data retrieval call binding the contract method 0x07d7ca2b.
//
// Solidity: function zooNFT() view returns(address)
func (_Zoo *ZooCallerSession) ZooNFT() (common.Address, error) {
	return _Zoo.Contract.ZooNFT(&_Zoo.CallOpts)
}

// ZooToken is a free data retrieval call binding the contract method 0x914cd3ee.
//
// Solidity: function zooToken() view returns(address)
func (_Zoo *ZooCaller) ZooToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Zoo.contract.Call(opts, &out, "zooToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ZooToken is a free data retrieval call binding the contract method 0x914cd3ee.
//
// Solidity: function zooToken() view returns(address)
func (_Zoo *ZooSession) ZooToken() (common.Address, error) {
	return _Zoo.Contract.ZooToken(&_Zoo.CallOpts)
}

// ZooToken is a free data retrieval call binding the contract method 0x914cd3ee.
//
// Solidity: function zooToken() view returns(address)
func (_Zoo *ZooCallerSession) ZooToken() (common.Address, error) {
	return _Zoo.Contract.ZooToken(&_Zoo.CallOpts)
}

// AddEgg is a paid mutator transaction binding the contract method 0xd1a393e7.
//
// Solidity: function addEgg(address addr) returns()
func (_Zoo *ZooTransactor) AddEgg(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _Zoo.contract.Transact(opts, "addEgg", addr)
}

// AddEgg is a paid mutator transaction binding the contract method 0xd1a393e7.
//
// Solidity: function addEgg(address addr) returns()
func (_Zoo *ZooSession) AddEgg(addr common.Address) (*types.Transaction, error) {
	return _Zoo.Contract.AddEgg(&_Zoo.TransactOpts, addr)
}

// AddEgg is a paid mutator transaction binding the contract method 0xd1a393e7.
//
// Solidity: function addEgg(address addr) returns()
func (_Zoo *ZooTransactorSession) AddEgg(addr common.Address) (*types.Transaction, error) {
	return _Zoo.Contract.AddEgg(&_Zoo.TransactOpts, addr)
}

// Compose is a paid mutator transaction binding the contract method 0x54c402a8.
//
// Solidity: function compose(uint256 fromTokenId, uint256 toTokenId) returns()
func (_Zoo *ZooTransactor) Compose(opts *bind.TransactOpts, fromTokenId *big.Int, toTokenId *big.Int) (*types.Transaction, error) {
	return _Zoo.contract.Transact(opts, "compose", fromTokenId, toTokenId)
}

// Compose is a paid mutator transaction binding the contract method 0x54c402a8.
//
// Solidity: function compose(uint256 fromTokenId, uint256 toTokenId) returns()
func (_Zoo *ZooSession) Compose(fromTokenId *big.Int, toTokenId *big.Int) (*types.Transaction, error) {
	return _Zoo.Contract.Compose(&_Zoo.TransactOpts, fromTokenId, toTokenId)
}

// Compose is a paid mutator transaction binding the contract method 0x54c402a8.
//
// Solidity: function compose(uint256 fromTokenId, uint256 toTokenId) returns()
func (_Zoo *ZooTransactorSession) Compose(fromTokenId *big.Int, toTokenId *big.Int) (*types.Transaction, error) {
	return _Zoo.Contract.Compose(&_Zoo.TransactOpts, fromTokenId, toTokenId)
}

// ConfigNFTParams is a paid mutator transaction binding the contract method 0xa12b8bed.
//
// Solidity: function configNFTParams(uint256 _maxLevel, uint256 _maxNFTCategory) returns()
func (_Zoo *ZooTransactor) ConfigNFTParams(opts *bind.TransactOpts, _maxLevel *big.Int, _maxNFTCategory *big.Int) (*types.Transaction, error) {
	return _Zoo.contract.Transact(opts, "configNFTParams", _maxLevel, _maxNFTCategory)
}

// ConfigNFTParams is a paid mutator transaction binding the contract method 0xa12b8bed.
//
// Solidity: function configNFTParams(uint256 _maxLevel, uint256 _maxNFTCategory) returns()
func (_Zoo *ZooSession) ConfigNFTParams(_maxLevel *big.Int, _maxNFTCategory *big.Int) (*types.Transaction, error) {
	return _Zoo.Contract.ConfigNFTParams(&_Zoo.TransactOpts, _maxLevel, _maxNFTCategory)
}

// ConfigNFTParams is a paid mutator transaction binding the contract method 0xa12b8bed.
//
// Solidity: function configNFTParams(uint256 _maxLevel, uint256 _maxNFTCategory) returns()
func (_Zoo *ZooTransactorSession) ConfigNFTParams(_maxLevel *big.Int, _maxNFTCategory *big.Int) (*types.Transaction, error) {
	return _Zoo.Contract.ConfigNFTParams(&_Zoo.TransactOpts, _maxLevel, _maxNFTCategory)
}

// ConfigTokenAddress is a paid mutator transaction binding the contract method 0x5b365cb6.
//
// Solidity: function configTokenAddress(address _zooToken, address _zooNFT) returns()
func (_Zoo *ZooTransactor) ConfigTokenAddress(opts *bind.TransactOpts, _zooToken common.Address, _zooNFT common.Address) (*types.Transaction, error) {
	return _Zoo.contract.Transact(opts, "configTokenAddress", _zooToken, _zooNFT)
}

// ConfigTokenAddress is a paid mutator transaction binding the contract method 0x5b365cb6.
//
// Solidity: function configTokenAddress(address _zooToken, address _zooNFT) returns()
func (_Zoo *ZooSession) ConfigTokenAddress(_zooToken common.Address, _zooNFT common.Address) (*types.Transaction, error) {
	return _Zoo.Contract.ConfigTokenAddress(&_Zoo.TransactOpts, _zooToken, _zooNFT)
}

// ConfigTokenAddress is a paid mutator transaction binding the contract method 0x5b365cb6.
//
// Solidity: function configTokenAddress(address _zooToken, address _zooNFT) returns()
func (_Zoo *ZooTransactorSession) ConfigTokenAddress(_zooToken common.Address, _zooNFT common.Address) (*types.Transaction, error) {
	return _Zoo.Contract.ConfigTokenAddress(&_Zoo.TransactOpts, _zooToken, _zooNFT)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Zoo *ZooTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Zoo.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Zoo *ZooSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Zoo.Contract.GrantRole(&_Zoo.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Zoo *ZooTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Zoo.Contract.GrantRole(&_Zoo.TransactOpts, role, account)
}

// Hatch is a paid mutator transaction binding the contract method 0xd0db5083.
//
// Solidity: function hatch() returns()
func (_Zoo *ZooTransactor) Hatch(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Zoo.contract.Transact(opts, "hatch")
}

// Hatch is a paid mutator transaction binding the contract method 0xd0db5083.
//
// Solidity: function hatch() returns()
func (_Zoo *ZooSession) Hatch() (*types.Transaction, error) {
	return _Zoo.Contract.Hatch(&_Zoo.TransactOpts)
}

// Hatch is a paid mutator transaction binding the contract method 0xd0db5083.
//
// Solidity: function hatch() returns()
func (_Zoo *ZooTransactorSession) Hatch() (*types.Transaction, error) {
	return _Zoo.Contract.Hatch(&_Zoo.TransactOpts)
}

// Pledge is a paid mutator transaction binding the contract method 0x7326c9c0.
//
// Solidity: function pledge(uint256 _currentPrice) returns()
func (_Zoo *ZooTransactor) Pledge(opts *bind.TransactOpts, _currentPrice *big.Int) (*types.Transaction, error) {
	return _Zoo.contract.Transact(opts, "pledge", _currentPrice)
}

// Pledge is a paid mutator transaction binding the contract method 0x7326c9c0.
//
// Solidity: function pledge(uint256 _currentPrice) returns()
func (_Zoo *ZooSession) Pledge(_currentPrice *big.Int) (*types.Transaction, error) {
	return _Zoo.Contract.Pledge(&_Zoo.TransactOpts, _currentPrice)
}

// Pledge is a paid mutator transaction binding the contract method 0x7326c9c0.
//
// Solidity: function pledge(uint256 _currentPrice) returns()
func (_Zoo *ZooTransactorSession) Pledge(_currentPrice *big.Int) (*types.Transaction, error) {
	return _Zoo.Contract.Pledge(&_Zoo.TransactOpts, _currentPrice)
}

// Redeem is a paid mutator transaction binding the contract method 0xdb006a75.
//
// Solidity: function redeem(uint256 _currentPrice) returns()
func (_Zoo *ZooTransactor) Redeem(opts *bind.TransactOpts, _currentPrice *big.Int) (*types.Transaction, error) {
	return _Zoo.contract.Transact(opts, "redeem", _currentPrice)
}

// Redeem is a paid mutator transaction binding the contract method 0xdb006a75.
//
// Solidity: function redeem(uint256 _currentPrice) returns()
func (_Zoo *ZooSession) Redeem(_currentPrice *big.Int) (*types.Transaction, error) {
	return _Zoo.Contract.Redeem(&_Zoo.TransactOpts, _currentPrice)
}

// Redeem is a paid mutator transaction binding the contract method 0xdb006a75.
//
// Solidity: function redeem(uint256 _currentPrice) returns()
func (_Zoo *ZooTransactorSession) Redeem(_currentPrice *big.Int) (*types.Transaction, error) {
	return _Zoo.Contract.Redeem(&_Zoo.TransactOpts, _currentPrice)
}

// RedeemAnimal is a paid mutator transaction binding the contract method 0x1422f5dc.
//
// Solidity: function redeemAnimal(uint256 tokenId) returns()
func (_Zoo *ZooTransactor) RedeemAnimal(opts *bind.TransactOpts, tokenId *big.Int) (*types.Transaction, error) {
	return _Zoo.contract.Transact(opts, "redeemAnimal", tokenId)
}

// RedeemAnimal is a paid mutator transaction binding the contract method 0x1422f5dc.
//
// Solidity: function redeemAnimal(uint256 tokenId) returns()
func (_Zoo *ZooSession) RedeemAnimal(tokenId *big.Int) (*types.Transaction, error) {
	return _Zoo.Contract.RedeemAnimal(&_Zoo.TransactOpts, tokenId)
}

// RedeemAnimal is a paid mutator transaction binding the contract method 0x1422f5dc.
//
// Solidity: function redeemAnimal(uint256 tokenId) returns()
func (_Zoo *ZooTransactorSession) RedeemAnimal(tokenId *big.Int) (*types.Transaction, error) {
	return _Zoo.Contract.RedeemAnimal(&_Zoo.TransactOpts, tokenId)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Zoo *ZooTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Zoo.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Zoo *ZooSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Zoo.Contract.RenounceRole(&_Zoo.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Zoo *ZooTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Zoo.Contract.RenounceRole(&_Zoo.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Zoo *ZooTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Zoo.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Zoo *ZooSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Zoo.Contract.RevokeRole(&_Zoo.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Zoo *ZooTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Zoo.Contract.RevokeRole(&_Zoo.TransactOpts, role, account)
}

// Uplevel is a paid mutator transaction binding the contract method 0x530751db.
//
// Solidity: function uplevel(uint256 fromTokenId, uint256 toTokenId) returns()
func (_Zoo *ZooTransactor) Uplevel(opts *bind.TransactOpts, fromTokenId *big.Int, toTokenId *big.Int) (*types.Transaction, error) {
	return _Zoo.contract.Transact(opts, "uplevel", fromTokenId, toTokenId)
}

// Uplevel is a paid mutator transaction binding the contract method 0x530751db.
//
// Solidity: function uplevel(uint256 fromTokenId, uint256 toTokenId) returns()
func (_Zoo *ZooSession) Uplevel(fromTokenId *big.Int, toTokenId *big.Int) (*types.Transaction, error) {
	return _Zoo.Contract.Uplevel(&_Zoo.TransactOpts, fromTokenId, toTokenId)
}

// Uplevel is a paid mutator transaction binding the contract method 0x530751db.
//
// Solidity: function uplevel(uint256 fromTokenId, uint256 toTokenId) returns()
func (_Zoo *ZooTransactorSession) Uplevel(fromTokenId *big.Int, toTokenId *big.Int) (*types.Transaction, error) {
	return _Zoo.Contract.Uplevel(&_Zoo.TransactOpts, fromTokenId, toTokenId)
}

// ZooAddEggIterator is returned from FilterAddEgg and is used to iterate over the raw logs and unpacked data for AddEgg events raised by the Zoo contract.
type ZooAddEggIterator struct {
	Event *ZooAddEgg // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZooAddEggIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZooAddEgg)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZooAddEgg)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZooAddEggIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZooAddEggIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZooAddEgg represents a AddEgg event raised by the Zoo contract.
type ZooAddEgg struct {
	User common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterAddEgg is a free log retrieval operation binding the contract event 0xeed0a4a071f5962c9685ec08b2c85779ef31b4a40842fc448c3d7b43582117c5.
//
// Solidity: event AddEgg(address indexed user)
func (_Zoo *ZooFilterer) FilterAddEgg(opts *bind.FilterOpts, user []common.Address) (*ZooAddEggIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Zoo.contract.FilterLogs(opts, "AddEgg", userRule)
	if err != nil {
		return nil, err
	}
	return &ZooAddEggIterator{contract: _Zoo.contract, event: "AddEgg", logs: logs, sub: sub}, nil
}

// WatchAddEgg is a free log subscription operation binding the contract event 0xeed0a4a071f5962c9685ec08b2c85779ef31b4a40842fc448c3d7b43582117c5.
//
// Solidity: event AddEgg(address indexed user)
func (_Zoo *ZooFilterer) WatchAddEgg(opts *bind.WatchOpts, sink chan<- *ZooAddEgg, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Zoo.contract.WatchLogs(opts, "AddEgg", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZooAddEgg)
				if err := _Zoo.contract.UnpackLog(event, "AddEgg", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddEgg is a log parse operation binding the contract event 0xeed0a4a071f5962c9685ec08b2c85779ef31b4a40842fc448c3d7b43582117c5.
//
// Solidity: event AddEgg(address indexed user)
func (_Zoo *ZooFilterer) ParseAddEgg(log types.Log) (*ZooAddEgg, error) {
	event := new(ZooAddEgg)
	if err := _Zoo.contract.UnpackLog(event, "AddEgg", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZooInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Zoo contract.
type ZooInitializedIterator struct {
	Event *ZooInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZooInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZooInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZooInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZooInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZooInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZooInitialized represents a Initialized event raised by the Zoo contract.
type ZooInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Zoo *ZooFilterer) FilterInitialized(opts *bind.FilterOpts) (*ZooInitializedIterator, error) {

	logs, sub, err := _Zoo.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ZooInitializedIterator{contract: _Zoo.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Zoo *ZooFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ZooInitialized) (event.Subscription, error) {

	logs, sub, err := _Zoo.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZooInitialized)
				if err := _Zoo.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Zoo *ZooFilterer) ParseInitialized(log types.Log) (*ZooInitialized, error) {
	event := new(ZooInitialized)
	if err := _Zoo.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZooMintNFTIterator is returned from FilterMintNFT and is used to iterate over the raw logs and unpacked data for MintNFT events raised by the Zoo contract.
type ZooMintNFTIterator struct {
	Event *ZooMintNFT // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZooMintNFTIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZooMintNFT)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZooMintNFT)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZooMintNFTIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZooMintNFTIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZooMintNFT represents a MintNFT event raised by the Zoo contract.
type ZooMintNFT struct {
	Level    *big.Int
	Category *big.Int
	Capacity *big.Int
	Volume   *big.Int
	Rarity   *big.Int
	Sex      *big.Int
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterMintNFT is a free log retrieval operation binding the contract event 0xd91cbd3de6affcad25c262e09b10927c474bc5a8bb4e06ad5fdd74cdd65d22db.
//
// Solidity: event MintNFT(uint256 level, uint256 category, uint256 capacity, uint256 volume, uint256 rarity, uint256 sex, uint256 tokenId)
func (_Zoo *ZooFilterer) FilterMintNFT(opts *bind.FilterOpts) (*ZooMintNFTIterator, error) {

	logs, sub, err := _Zoo.contract.FilterLogs(opts, "MintNFT")
	if err != nil {
		return nil, err
	}
	return &ZooMintNFTIterator{contract: _Zoo.contract, event: "MintNFT", logs: logs, sub: sub}, nil
}

// WatchMintNFT is a free log subscription operation binding the contract event 0xd91cbd3de6affcad25c262e09b10927c474bc5a8bb4e06ad5fdd74cdd65d22db.
//
// Solidity: event MintNFT(uint256 level, uint256 category, uint256 capacity, uint256 volume, uint256 rarity, uint256 sex, uint256 tokenId)
func (_Zoo *ZooFilterer) WatchMintNFT(opts *bind.WatchOpts, sink chan<- *ZooMintNFT) (event.Subscription, error) {

	logs, sub, err := _Zoo.contract.WatchLogs(opts, "MintNFT")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZooMintNFT)
				if err := _Zoo.contract.UnpackLog(event, "MintNFT", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMintNFT is a log parse operation binding the contract event 0xd91cbd3de6affcad25c262e09b10927c474bc5a8bb4e06ad5fdd74cdd65d22db.
//
// Solidity: event MintNFT(uint256 level, uint256 category, uint256 capacity, uint256 volume, uint256 rarity, uint256 sex, uint256 tokenId)
func (_Zoo *ZooFilterer) ParseMintNFT(log types.Log) (*ZooMintNFT, error) {
	event := new(ZooMintNFT)
	if err := _Zoo.contract.UnpackLog(event, "MintNFT", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZooRequestPledgeIterator is returned from FilterRequestPledge and is used to iterate over the raw logs and unpacked data for RequestPledge events raised by the Zoo contract.
type ZooRequestPledgeIterator struct {
	Event *ZooRequestPledge // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZooRequestPledgeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZooRequestPledge)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZooRequestPledge)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZooRequestPledgeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZooRequestPledgeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZooRequestPledge represents a RequestPledge event raised by the Zoo contract.
type ZooRequestPledge struct {
	User  common.Address
	Price *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterRequestPledge is a free log retrieval operation binding the contract event 0xadd17c191f783d5aab1389083cb2671a814c2ab41423b8cc26cd379a553b7020.
//
// Solidity: event RequestPledge(address indexed user, uint256 price)
func (_Zoo *ZooFilterer) FilterRequestPledge(opts *bind.FilterOpts, user []common.Address) (*ZooRequestPledgeIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Zoo.contract.FilterLogs(opts, "RequestPledge", userRule)
	if err != nil {
		return nil, err
	}
	return &ZooRequestPledgeIterator{contract: _Zoo.contract, event: "RequestPledge", logs: logs, sub: sub}, nil
}

// WatchRequestPledge is a free log subscription operation binding the contract event 0xadd17c191f783d5aab1389083cb2671a814c2ab41423b8cc26cd379a553b7020.
//
// Solidity: event RequestPledge(address indexed user, uint256 price)
func (_Zoo *ZooFilterer) WatchRequestPledge(opts *bind.WatchOpts, sink chan<- *ZooRequestPledge, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Zoo.contract.WatchLogs(opts, "RequestPledge", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZooRequestPledge)
				if err := _Zoo.contract.UnpackLog(event, "RequestPledge", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequestPledge is a log parse operation binding the contract event 0xadd17c191f783d5aab1389083cb2671a814c2ab41423b8cc26cd379a553b7020.
//
// Solidity: event RequestPledge(address indexed user, uint256 price)
func (_Zoo *ZooFilterer) ParseRequestPledge(log types.Log) (*ZooRequestPledge, error) {
	event := new(ZooRequestPledge)
	if err := _Zoo.contract.UnpackLog(event, "RequestPledge", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZooRequestredeemIterator is returned from FilterRequestredeem and is used to iterate over the raw logs and unpacked data for Requestredeem events raised by the Zoo contract.
type ZooRequestredeemIterator struct {
	Event *ZooRequestredeem // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZooRequestredeemIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZooRequestredeem)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZooRequestredeem)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZooRequestredeemIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZooRequestredeemIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZooRequestredeem represents a Requestredeem event raised by the Zoo contract.
type ZooRequestredeem struct {
	User  common.Address
	Price *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterRequestredeem is a free log retrieval operation binding the contract event 0x4548be779ed6f5fc480e9ef0f9e62d6c57103941afa46ab77330a42546a21d28.
//
// Solidity: event Requestredeem(address indexed user, uint256 price)
func (_Zoo *ZooFilterer) FilterRequestredeem(opts *bind.FilterOpts, user []common.Address) (*ZooRequestredeemIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Zoo.contract.FilterLogs(opts, "Requestredeem", userRule)
	if err != nil {
		return nil, err
	}
	return &ZooRequestredeemIterator{contract: _Zoo.contract, event: "Requestredeem", logs: logs, sub: sub}, nil
}

// WatchRequestredeem is a free log subscription operation binding the contract event 0x4548be779ed6f5fc480e9ef0f9e62d6c57103941afa46ab77330a42546a21d28.
//
// Solidity: event Requestredeem(address indexed user, uint256 price)
func (_Zoo *ZooFilterer) WatchRequestredeem(opts *bind.WatchOpts, sink chan<- *ZooRequestredeem, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Zoo.contract.WatchLogs(opts, "Requestredeem", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZooRequestredeem)
				if err := _Zoo.contract.UnpackLog(event, "Requestredeem", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequestredeem is a log parse operation binding the contract event 0x4548be779ed6f5fc480e9ef0f9e62d6c57103941afa46ab77330a42546a21d28.
//
// Solidity: event Requestredeem(address indexed user, uint256 price)
func (_Zoo *ZooFilterer) ParseRequestredeem(log types.Log) (*ZooRequestredeem, error) {
	event := new(ZooRequestredeem)
	if err := _Zoo.contract.UnpackLog(event, "Requestredeem", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZooRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the Zoo contract.
type ZooRoleAdminChangedIterator struct {
	Event *ZooRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZooRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZooRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZooRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZooRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZooRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZooRoleAdminChanged represents a RoleAdminChanged event raised by the Zoo contract.
type ZooRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Zoo *ZooFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*ZooRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _Zoo.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &ZooRoleAdminChangedIterator{contract: _Zoo.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Zoo *ZooFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *ZooRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _Zoo.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZooRoleAdminChanged)
				if err := _Zoo.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Zoo *ZooFilterer) ParseRoleAdminChanged(log types.Log) (*ZooRoleAdminChanged, error) {
	event := new(ZooRoleAdminChanged)
	if err := _Zoo.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZooRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the Zoo contract.
type ZooRoleGrantedIterator struct {
	Event *ZooRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZooRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZooRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZooRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZooRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZooRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZooRoleGranted represents a RoleGranted event raised by the Zoo contract.
type ZooRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Zoo *ZooFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*ZooRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Zoo.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &ZooRoleGrantedIterator{contract: _Zoo.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Zoo *ZooFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *ZooRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Zoo.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZooRoleGranted)
				if err := _Zoo.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Zoo *ZooFilterer) ParseRoleGranted(log types.Log) (*ZooRoleGranted, error) {
	event := new(ZooRoleGranted)
	if err := _Zoo.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZooRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the Zoo contract.
type ZooRoleRevokedIterator struct {
	Event *ZooRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZooRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZooRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZooRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZooRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZooRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZooRoleRevoked represents a RoleRevoked event raised by the Zoo contract.
type ZooRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Zoo *ZooFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*ZooRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Zoo.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &ZooRoleRevokedIterator{contract: _Zoo.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Zoo *ZooFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *ZooRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Zoo.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZooRoleRevoked)
				if err := _Zoo.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Zoo *ZooFilterer) ParseRoleRevoked(log types.Log) (*ZooRoleRevoked, error) {
	event := new(ZooRoleRevoked)
	if err := _Zoo.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZooComposeLogIterator is returned from FilterComposeLog and is used to iterate over the raw logs and unpacked data for ComposeLog events raised by the Zoo contract.
type ZooComposeLogIterator struct {
	Event *ZooComposeLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZooComposeLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZooComposeLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZooComposeLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZooComposeLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZooComposeLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZooComposeLog represents a ComposeLog event raised by the Zoo contract.
type ZooComposeLog struct {
	FromTokenId *big.Int
	ToTokenId   *big.Int
	ResId       *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterComposeLog is a free log retrieval operation binding the contract event 0x754cdadcf639f4dd10b88737892b3bd020f59fa2def01dea53856e20ed96aaa6.
//
// Solidity: event composeLog(uint256 fromTokenId, uint256 toTokenId, uint256 resId)
func (_Zoo *ZooFilterer) FilterComposeLog(opts *bind.FilterOpts) (*ZooComposeLogIterator, error) {

	logs, sub, err := _Zoo.contract.FilterLogs(opts, "composeLog")
	if err != nil {
		return nil, err
	}
	return &ZooComposeLogIterator{contract: _Zoo.contract, event: "composeLog", logs: logs, sub: sub}, nil
}

// WatchComposeLog is a free log subscription operation binding the contract event 0x754cdadcf639f4dd10b88737892b3bd020f59fa2def01dea53856e20ed96aaa6.
//
// Solidity: event composeLog(uint256 fromTokenId, uint256 toTokenId, uint256 resId)
func (_Zoo *ZooFilterer) WatchComposeLog(opts *bind.WatchOpts, sink chan<- *ZooComposeLog) (event.Subscription, error) {

	logs, sub, err := _Zoo.contract.WatchLogs(opts, "composeLog")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZooComposeLog)
				if err := _Zoo.contract.UnpackLog(event, "composeLog", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseComposeLog is a log parse operation binding the contract event 0x754cdadcf639f4dd10b88737892b3bd020f59fa2def01dea53856e20ed96aaa6.
//
// Solidity: event composeLog(uint256 fromTokenId, uint256 toTokenId, uint256 resId)
func (_Zoo *ZooFilterer) ParseComposeLog(log types.Log) (*ZooComposeLog, error) {
	event := new(ZooComposeLog)
	if err := _Zoo.contract.UnpackLog(event, "composeLog", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZooLogIterator is returned from FilterLog and is used to iterate over the raw logs and unpacked data for Log events raised by the Zoo contract.
type ZooLogIterator struct {
	Event *ZooLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZooLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZooLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZooLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZooLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZooLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZooLog represents a Log event raised by the Zoo contract.
type ZooLog struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLog is a free log retrieval operation binding the contract event 0xf82c50f1848136e6c140b186ea0c768b7deda5efffe42c25e96336a90b26c744.
//
// Solidity: event log(uint256 arg0)
func (_Zoo *ZooFilterer) FilterLog(opts *bind.FilterOpts) (*ZooLogIterator, error) {

	logs, sub, err := _Zoo.contract.FilterLogs(opts, "log")
	if err != nil {
		return nil, err
	}
	return &ZooLogIterator{contract: _Zoo.contract, event: "log", logs: logs, sub: sub}, nil
}

// WatchLog is a free log subscription operation binding the contract event 0xf82c50f1848136e6c140b186ea0c768b7deda5efffe42c25e96336a90b26c744.
//
// Solidity: event log(uint256 arg0)
func (_Zoo *ZooFilterer) WatchLog(opts *bind.WatchOpts, sink chan<- *ZooLog) (event.Subscription, error) {

	logs, sub, err := _Zoo.contract.WatchLogs(opts, "log")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZooLog)
				if err := _Zoo.contract.UnpackLog(event, "log", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLog is a log parse operation binding the contract event 0xf82c50f1848136e6c140b186ea0c768b7deda5efffe42c25e96336a90b26c744.
//
// Solidity: event log(uint256 arg0)
func (_Zoo *ZooFilterer) ParseLog(log types.Log) (*ZooLog, error) {
	event := new(ZooLog)
	if err := _Zoo.contract.UnpackLog(event, "log", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZooRedeemAnimalLogIterator is returned from FilterRedeemAnimalLog and is used to iterate over the raw logs and unpacked data for RedeemAnimalLog events raised by the Zoo contract.
type ZooRedeemAnimalLogIterator struct {
	Event *ZooRedeemAnimalLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZooRedeemAnimalLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZooRedeemAnimalLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZooRedeemAnimalLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZooRedeemAnimalLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZooRedeemAnimalLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZooRedeemAnimalLog represents a RedeemAnimalLog event raised by the Zoo contract.
type ZooRedeemAnimalLog struct {
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRedeemAnimalLog is a free log retrieval operation binding the contract event 0x4412610c5351203dce7bbb1ec562eedc946bf002ac220c9796e8ecf05bf850d5.
//
// Solidity: event redeemAnimalLog(uint256 tokenId)
func (_Zoo *ZooFilterer) FilterRedeemAnimalLog(opts *bind.FilterOpts) (*ZooRedeemAnimalLogIterator, error) {

	logs, sub, err := _Zoo.contract.FilterLogs(opts, "redeemAnimalLog")
	if err != nil {
		return nil, err
	}
	return &ZooRedeemAnimalLogIterator{contract: _Zoo.contract, event: "redeemAnimalLog", logs: logs, sub: sub}, nil
}

// WatchRedeemAnimalLog is a free log subscription operation binding the contract event 0x4412610c5351203dce7bbb1ec562eedc946bf002ac220c9796e8ecf05bf850d5.
//
// Solidity: event redeemAnimalLog(uint256 tokenId)
func (_Zoo *ZooFilterer) WatchRedeemAnimalLog(opts *bind.WatchOpts, sink chan<- *ZooRedeemAnimalLog) (event.Subscription, error) {

	logs, sub, err := _Zoo.contract.WatchLogs(opts, "redeemAnimalLog")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZooRedeemAnimalLog)
				if err := _Zoo.contract.UnpackLog(event, "redeemAnimalLog", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRedeemAnimalLog is a log parse operation binding the contract event 0x4412610c5351203dce7bbb1ec562eedc946bf002ac220c9796e8ecf05bf850d5.
//
// Solidity: event redeemAnimalLog(uint256 tokenId)
func (_Zoo *ZooFilterer) ParseRedeemAnimalLog(log types.Log) (*ZooRedeemAnimalLog, error) {
	event := new(ZooRedeemAnimalLog)
	if err := _Zoo.contract.UnpackLog(event, "redeemAnimalLog", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZooUplevelLogIterator is returned from FilterUplevelLog and is used to iterate over the raw logs and unpacked data for UplevelLog events raised by the Zoo contract.
type ZooUplevelLogIterator struct {
	Event *ZooUplevelLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZooUplevelLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZooUplevelLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZooUplevelLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZooUplevelLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZooUplevelLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZooUplevelLog represents a UplevelLog event raised by the Zoo contract.
type ZooUplevelLog struct {
	FromTokenId *big.Int
	ToTokenId   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterUplevelLog is a free log retrieval operation binding the contract event 0x1e421d302a76ee942e95270c649a08a3dc10f9cc9ca497c0cccb89f9985fe415.
//
// Solidity: event uplevelLog(uint256 fromTokenId, uint256 toTokenId)
func (_Zoo *ZooFilterer) FilterUplevelLog(opts *bind.FilterOpts) (*ZooUplevelLogIterator, error) {

	logs, sub, err := _Zoo.contract.FilterLogs(opts, "uplevelLog")
	if err != nil {
		return nil, err
	}
	return &ZooUplevelLogIterator{contract: _Zoo.contract, event: "uplevelLog", logs: logs, sub: sub}, nil
}

// WatchUplevelLog is a free log subscription operation binding the contract event 0x1e421d302a76ee942e95270c649a08a3dc10f9cc9ca497c0cccb89f9985fe415.
//
// Solidity: event uplevelLog(uint256 fromTokenId, uint256 toTokenId)
func (_Zoo *ZooFilterer) WatchUplevelLog(opts *bind.WatchOpts, sink chan<- *ZooUplevelLog) (event.Subscription, error) {

	logs, sub, err := _Zoo.contract.WatchLogs(opts, "uplevelLog")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZooUplevelLog)
				if err := _Zoo.contract.UnpackLog(event, "uplevelLog", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUplevelLog is a log parse operation binding the contract event 0x1e421d302a76ee942e95270c649a08a3dc10f9cc9ca497c0cccb89f9985fe415.
//
// Solidity: event uplevelLog(uint256 fromTokenId, uint256 toTokenId)
func (_Zoo *ZooFilterer) ParseUplevelLog(log types.Log) (*ZooUplevelLog, error) {
	event := new(ZooUplevelLog)
	if err := _Zoo.contract.UnpackLog(event, "uplevelLog", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
